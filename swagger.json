{
    "swagger": "2.0",
    "info": {
        "title": "Swagger Petstore",
        "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "apiteam@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/products/{product_id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "responses": {
                    "default": {
                        "$ref": "#/responses/product"
                    }
                }
            },
            "patch": {
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/product_in_body"
                    }
                ],
                "responses": {
                    "default": {
                        "$ref": "#/responses/product"
                    }
                }
            },
            "parameters": [
                {
                    "$ref": "#/parameters/product_id_in_path_required"
                }
            ]
        },
        "/filtered": {
            "get": {
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/api/path": {
            "post": {
                "summary": "Post to URL",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "maximum": 64
                                },
                                "description": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Example extended response",
                        "schema": {
                            "properties": {
                                "status": {
                                    "description": "The status of a product",
                                    "type": "string",
                                    "default": "available",
                                    "enum": [
                                        "available",
                                        "discontinued"
                                    ]
                                },
                                "success": {
                                    "type": "boolean"
                                },
                                "data": {
                                    "$ref": "#/definitions/Product"
                                },
                                "errors": {
                                    "type": "object"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "Bearer": []
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "deprecated": true,
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "default": "available",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ]
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet": {
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "description": "",
                "operationId": "updatePet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "",
                "operationId": "addPet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "additionalMetadata",
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file to upload",
                        "required": false,
                        "type": "file"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "read:pets",
                            "write:pets"
                        ]
                    }
                ]
            }
        },
        "/store/inventory": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "order placed for purchasing the pet",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "maximum": 10,
                        "minimum": 1
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "minimum": 1
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Created user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "type": "integer",
                                "format": "int32"
                            },
                            "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "type": "string",
                                "format": "date-time"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/pets": {
            "get": {
                "description": "Returns all pets from the system that the user has access to",
                "operationId": "findPets",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/xml",
                    "text/html"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "tags to filter by",
                        "required": false,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "maximum number of results to return",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new pet in the store.  Duplicates are allowed",
                "operationId": "addPet",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "pet",
                        "in": "body",
                        "description": "Pet to add to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NewPet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            }
        },
        "/pets/{id}": {
            "get": {
                "description": "Returns a user based on a single ID, if the user does not have access to the pet",
                "operationId": "findPetById",
                "produces": [
                    "application/json",
                    "application/xml",
                    "text/html",
                    "text/xml"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to fetch",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "pet response",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            },
            "delete": {
                "description": "deletes a single pet based on the ID supplied",
                "operationId": "deletePet",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of pet to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "pet deleted"
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/ErrorModel"
                        }
                    }
                }
            }
        },
        "/pets/{petId}": {
            "get": {
                "tags": [
                    "pets"
                ],
                "summary": "Info for a specific pet",
                "operationId": "showPetById",
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "The id of the pet to retrieve",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expected response to a valid request",
                        "schema": {
                            "$ref": "#/definitions/Pets"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/products": {
            "post": {
                "tags": [
                    "Products"
                ],
                "parameters": [
                    {
                        "$ref": "#/parameters/product_in_body"
                    }
                ],
                "responses": {
                    "default": {
                        "$ref": "#/responses/product"
                    }
                }
            }
        },
        "api/3rd-party": {
            "get": {
                "responses": {
                    "200": {
                        "description": "a response"
                    }
                }
            }
        },
        "api/test1": {
            "get": {
                "summary": "Example summary",
                "description": "Example description...\nMore description...",
                "responses": {
                    "200": {
                        "description": "a response"
                    }
                }
            }
        },
        "api/test2": {
            "get": {
                "summary": "Example summary",
                "responses": {
                    "200": {
                        "description": "a response"
                    }
                }
            }
        },
        "/pi/{item_name}": {
            "get": {
                "summary": "Get protected item",
                "parameters": [
                    {
                        "$ref": "#/parameters/ItemName"
                    }
                ],
                "responses": {
                    "default": {
                        "$ref": "#/responses/Item"
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update user entry",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UUID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "default": {
                        "description": "error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Remove user entry",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "UUID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "default": {
                        "description": "error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "options": {
                "responses": {
                    "200": {
                        "description": "Some CORS stuff"
                    }
                }
            },
            "head": {
                "responses": {
                    "200": {
                        "description": "Only checking if it exists"
                    }
                }
            }
        }
    },
    "definitions": {
        "ErrorModel": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Error": {
            "required": [
                "code",
                "message"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Pets": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Pet"
            }
        },
        "Product": {
            "properties": {
                "id": {
                    "description": "",
                    "type": "integer",
                    "format": "int64"
                },
                "status": {
                    "description": "",
                    "type": "boolean",
                    "format": "boolean"
                }
            }
        },
        "ExampleDefinition": {
            "properties": {
                "status": {
                    "description": "The status of a product",
                    "type": "string",
                    "default": "available",
                    "enum": [
                        "available",
                        "discontinued"
                    ]
                }
            }
        },
        "ApiResponse": {
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "Category": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "xml": {
                "name": "Category"
            }
        },
        "Order": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "petId": {
                    "type": "integer",
                    "format": "int64"
                },
                "complete": {
                    "type": "boolean",
                    "default": false
                },
                "quantity": {
                    "type": "integer",
                    "format": "int32"
                },
                "shipDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "status": {
                    "description": "Order Status",
                    "type": "string",
                    "enum": [
                        "placed",
                        "approved",
                        "delivered"
                    ]
                }
            },
            "type": "object",
            "xml": {
                "name": "Order"
            }
        },
        "Pet": {
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Tag"
                    },
                    "xml": {
                        "name": "tag",
                        "wrapped": true
                    }
                },
                "status": {
                    "description": "pet status in the store",
                    "type": "string",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "type": "object",
            "xml": {
                "name": "Pet"
            }
        },
        "Tag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "xml": {
                "name": "Tag"
            }
        },
        "User": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "description": "User Status",
                    "type": "integer",
                    "format": "int32"
                }
            },
            "type": "object",
            "xml": {
                "name": "User"
            }
        },
        "NewPet": {
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "product_status": {
            "description": "The status of a product",
            "type": "string",
            "default": "available",
            "enum": [
                "available",
                "discontinued"
            ]
        },
        "Child": {
            "properties": {
                "isBaby": {
                    "type": "boolean"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "ChildWithDocBlocks": {
            "properties": {
                "isBaby": {
                    "type": "boolean"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "Customer": {
            "properties": {
                "firstname": {
                    "description": "The first name of the customer.",
                    "type": "string"
                },
                "secondname": {
                    "description": "The second name of the customer.",
                    "type": "string"
                },
                "thirdname": {
                    "description": "The third name of the customer.",
                    "type": "string"
                },
                "fourthname": {
                    "description": "The unknown name of the customer."
                },
                "lastname": {
                    "description": "The lastname of the customer.",
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "submittedBy": {
                    "$ref": "#/definitions/Customer"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Customer"
                    }
                }
            }
        },
        "TestProperty": {
            "description": "The status of a product",
            "type": "string",
            "default": "available",
            "enum": [
                "available",
                "discontinued"
            ]
        },
        "Hello": {
            "properties": {
                "greet": {}
            }
        },
        "NestedProperty": {
            "properties": {
                "parentProperty": {
                    "properties": {
                        "babyProperty": {
                            "properties": {
                                "theBabyOfBaby": {
                                    "properties": {
                                        "theBabyOfBabyBaby": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "boolean"
                                }
                            },
                            "type": "boolean"
                        }
                    },
                    "type": "boolean"
                }
            }
        }
    },
    "parameters": {
        "answer": {
            "name": "answer",
            "in": "body",
            "description": "Le Answer \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "question_id"
                ],
                "properties": {
                    "question_id": {
                        "description": "/rest/api/answers",
                        "type": "integer"
                    },
                    "answer": {
                        "description": "/rest/api/answers",
                        "type": "string"
                    },
                    "answer_resource_id": {
                        "description": "/rest/api/answers",
                        "type": "integer"
                    },
                    "is_true": {
                        "description": "/rest/api/answers",
                        "type": "boolean",
                        "default": "false"
                    },
                    "answer_order": {
                        "description": "/rest/api/answers",
                        "type": "integer",
                        "default": "0"
                    },
                    "resource_id": {
                        "description": "/rest/api/answers",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "limit": {
            "name": "limit",
            "in": "query",
            "description": "Nombre limite d'\u00e9l\u00e9ments.",
            "type": "integer",
            "default": "10"
        },
        "page": {
            "name": "page",
            "in": "query",
            "description": "Num\u00e9ro de page",
            "type": "integer",
            "default": "0"
        },
        "search": {
            "name": "search",
            "in": "query",
            "description": "Mot cl\u00e9 de recherche.",
            "type": "string"
        },
        "question_id": {
            "name": "question_id",
            "in": "query",
            "description": "ID de Question.",
            "type": "integer"
        },
        "id": {
            "name": "id",
            "in": "path",
            "description": "Identifiant de Answer.",
            "type": "integer"
        },
        "career": {
            "name": "career",
            "in": "body",
            "description": "Les donn\u00e9es de cr\u00e9ation du parcours.",
            "schema": {
                "required": [
                    "name",
                    "subtitle",
                    "description",
                    "color"
                ],
                "properties": {
                    "name": {
                        "description": "Le titre du parcours",
                        "type": "string"
                    },
                    "subtitle": {
                        "description": "Le sous-titre du parcours",
                        "type": "string"
                    },
                    "description": {
                        "description": "La description du parcours",
                        "type": "string"
                    },
                    "after_training": {
                        "description": "Les objectifs",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "picture_id": {
                        "description": "Id de la photo du parcours",
                        "type": "integer"
                    },
                    "banner_id": {
                        "description": "Id de la banni\u00e8re",
                        "type": "integer"
                    },
                    "presentation_movie_id": {
                        "description": "Id de la vid\u00e9o de pr\u00e9sentation",
                        "type": "integer"
                    },
                    "categories": {
                        "description": "ID des cat\u00e9gories \u00e0 affecter",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "color": {
                        "description": "Code couleur en hexad\u00e9cimale",
                        "type": "string"
                    },
                    "active": {
                        "description": "Activ\u00e9 ou non",
                        "type": "boolean"
                    },
                    "modules": {
                        "description": "Les modules \u00e0 int\u00e9grer",
                        "type": "array",
                        "items": {
                            "required": [
                                "type",
                                "module_id"
                            ],
                            "properties": {
                                "type": {
                                    "description": "training/lesson/resource/quiz",
                                    "type": "string"
                                },
                                "module_id": {
                                    "description": "Id du module",
                                    "type": "integer"
                                }
                            },
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            }
        },
        "exercise": {
            "name": "exercise",
            "in": "body",
            "description": "Category \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "name",
                    "meta_url",
                    "meta_title",
                    "meta_description"
                ],
                "properties": {
                    "name": {
                        "description": "/rest/api/categories",
                        "type": "string"
                    },
                    "name_en": {
                        "description": "/rest/api/categories",
                        "type": "string"
                    },
                    "description": {
                        "description": "/rest/api/categories",
                        "type": "string"
                    },
                    "color": {
                        "description": "/rest/api/categories",
                        "type": "string"
                    },
                    "sort_by": {
                        "description": "/rest/api/categories",
                        "type": "string"
                    },
                    "meta_url": {
                        "description": "/rest/api/categories",
                        "type": "integer"
                    },
                    "meta_title": {
                        "description": "/rest/api/categories",
                        "type": "integer"
                    },
                    "meta_description": {
                        "description": "/rest/api/categories",
                        "type": "integer"
                    },
                    "meta_keywords": {
                        "description": "/rest/api/categories",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "active": {
            "name": "active",
            "in": "path",
            "description": "Seul les categories active.",
            "type": "boolean",
            "default": "false"
        },
        "parent_id": {
            "name": "parent_id",
            "in": "query",
            "description": "ID du TrainingCategory parent.",
            "type": "integer"
        },
        "max_depth": {
            "name": "max_depth",
            "in": "query",
            "description": "Nombre de niveau \u00e0 retourner.",
            "type": "integer"
        },
        "direct_children_only": {
            "name": "direct_children_only",
            "in": "query",
            "description": "Flag indiquant la r\u00e9cup\u00e9ration exclusive ou non des TrainingCategory enfants directs.",
            "type": "boolean"
        },
        "category": {
            "name": "category",
            "in": "body",
            "description": "Les donn\u00e9e d'\u00e9dition du Category.",
            "schema": {
                "required": [
                    "name",
                    "name_en",
                    "description",
                    "color",
                    "site_id",
                    "channel_id",
                    "sort_by",
                    "parent_id",
                    "vignette_id"
                ],
                "properties": {
                    "name": {
                        "description": "/rest/api/categories/{id}",
                        "type": "string"
                    },
                    "name_en": {
                        "description": "/rest/api/categories/{id}",
                        "type": "string"
                    },
                    "description": {
                        "description": "/rest/api/categories/{id}",
                        "type": "string"
                    },
                    "color": {
                        "description": "/rest/api/categories/{id}",
                        "type": "string"
                    },
                    "site_id": {
                        "description": "/rest/api/categories/{id}",
                        "type": "integer"
                    },
                    "channel_id": {
                        "description": "/rest/api/categories/{id}",
                        "type": "integer"
                    },
                    "sort_by": {
                        "description": "/rest/api/categories/{id}",
                        "type": "string"
                    },
                    "parent_id": {
                        "description": "/rest/api/categories/{id}",
                        "type": "integer"
                    },
                    "vignette_id": {
                        "description": "/rest/api/categories/{id}",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "parent": {
            "name": "parent",
            "in": "path",
            "description": "Identifiant de la cat\u00e9gorie plac\u00e9 avant ou apr\u00e8s.",
            "type": "string"
        },
        "direction": {
            "name": "direction",
            "in": "path",
            "description": "next ou prev.",
            "type": "string"
        },
        "sibling": {
            "name": "sibling",
            "in": "path",
            "description": "Identifiant de la cat\u00e9gorie plac\u00e9 avant ou apr\u00e8s.",
            "type": "string"
        },
        "type": {
            "name": "type",
            "in": "path",
            "description": "Le type d'importation \u00e0 faire",
            "type": "string",
            "enum": [
                "new",
                "update"
            ]
        },
        "file": {
            "name": "file",
            "in": "formData",
            "description": "Le fichier \u00e0 importer",
            "type": "file"
        },
        "user_id": {
            "name": "user_id",
            "in": "query",
            "description": "Identifiant Utilisateur.",
            "type": "integer"
        },
        "start": {
            "name": "start",
            "in": "query",
            "description": "Offset",
            "type": "integer"
        },
        "exercise-instruction": {
            "name": "exercise-instruction",
            "in": "body",
            "description": "ExerciseInstruction \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "exercise_id"
                ],
                "properties": {
                    "exercise_id": {
                        "description": "/rest/api/exercise-instructions",
                        "type": "integer"
                    },
                    "time": {
                        "description": "/rest/api/exercise-instructions",
                        "type": "integer"
                    },
                    "resource_id": {
                        "description": "/rest/api/exercise-instructions",
                        "type": "integer"
                    },
                    "audio_id": {
                        "description": "/rest/api/exercise-instructions",
                        "type": "integer"
                    },
                    "description_resource_id": {
                        "description": "/rest/api/exercise-instructions",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "exercise_id": {
            "name": "exercise_id",
            "in": "query",
            "description": "ID de Exercise.",
            "type": "integer"
        },
        "exercise-question": {
            "name": "exercise-question",
            "in": "body",
            "description": "ExerciseQuestion \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "exercise_instruction_id",
                    "question",
                    "answer_formats"
                ],
                "properties": {
                    "exercise_instruction_id": {
                        "description": "/rest/api/exercise-questions",
                        "type": "integer"
                    },
                    "question": {
                        "description": "/rest/api/exercise-questions",
                        "type": "string"
                    },
                    "text_correction_resource_id": {
                        "description": "/rest/api/exercise-questions",
                        "type": "integer"
                    },
                    "audio_corrections_resource_id_list": {
                        "description": "/rest/api/exercise-questions",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "video_corrections_resource_id_list": {
                        "description": "/rest/api/exercise-questions",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "image_corrections_resource_id_list": {
                        "description": "/rest/api/exercise-questions",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "explanation": {
                        "description": "/rest/api/exercise-questions",
                        "type": "string"
                    },
                    "indication_resource_id": {
                        "description": "/rest/api/exercise-questions",
                        "type": "integer"
                    },
                    "answer_formats": {
                        "description": "/rest/api/exercise-questions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "is_unique_text_correction": {
                        "description": "/rest/api/exercise-questions",
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "exercise_instruction_id": {
            "name": "exercise_instruction_id",
            "in": "query",
            "description": "ID de ExerciseInstruction.",
            "type": "integer"
        },
        "name": {
            "name": "name",
            "in": "formData",
            "type": "string"
        },
        "legalForm": {
            "name": "legalForm",
            "in": "formData",
            "type": "string"
        },
        "socialReason": {
            "name": "socialReason",
            "in": "formData",
            "type": "string"
        },
        "siren": {
            "name": "siren",
            "in": "formData",
            "type": "string"
        },
        "shareCapital": {
            "name": "shareCapital",
            "in": "formData",
            "type": "string"
        },
        "shareCapitalCurrency": {
            "name": "shareCapitalCurrency",
            "in": "formData",
            "type": "string"
        },
        "tva": {
            "name": "tva",
            "in": "formData",
            "type": "boolean"
        },
        "tvaNumber": {
            "name": "tvaNumber",
            "in": "formData",
            "type": "string"
        },
        "paypal": {
            "name": "paypal",
            "in": "formData",
            "type": "string"
        },
        "website": {
            "name": "website",
            "in": "formData",
            "type": "string"
        },
        "otherSite": {
            "name": "otherSite",
            "in": "formData",
            "type": "string"
        },
        "facebookPage": {
            "name": "facebookPage",
            "in": "formData",
            "type": "string"
        },
        "youtubePage": {
            "name": "youtubePage",
            "in": "formData",
            "type": "string"
        },
        "instagramPage": {
            "name": "instagramPage",
            "in": "formData",
            "type": "string"
        },
        "twitterPage": {
            "name": "twitterPage",
            "in": "formData",
            "type": "string"
        },
        "linkedinPage": {
            "name": "linkedinPage",
            "in": "formData",
            "type": "string"
        },
        "credentialDocument": {
            "name": "credentialDocument",
            "in": "formData",
            "type": "file"
        },
        "kbisDocument": {
            "name": "kbisDocument",
            "in": "formData",
            "type": "file"
        },
        "attestationVigilanceDocument": {
            "name": "attestationVigilanceDocument",
            "in": "formData",
            "type": "file"
        },
        "socialReasonStreetNumber": {
            "name": "socialReasonStreetNumber",
            "in": "formData",
            "type": "string"
        },
        "socialReasonStreetName": {
            "name": "socialReasonStreetName",
            "in": "formData",
            "type": "string"
        },
        "socialReasonPostalCode": {
            "name": "socialReasonPostalCode",
            "in": "formData",
            "type": "string"
        },
        "socialReasonCity": {
            "name": "socialReasonCity",
            "in": "formData",
            "type": "string"
        },
        "lesson": {
            "name": "lesson",
            "in": "body",
            "description": "Le chapitre \u00e0 cr\u00e9er.",
            "schema": {
                "properties": {
                    "resource_id": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    },
                    "name": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "string"
                    },
                    "description": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "string"
                    },
                    "position": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    },
                    "time": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    },
                    "free": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "boolean"
                    },
                    "quiz_id": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    },
                    "lexicon_id": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    },
                    "exercise_id": {
                        "description": "/trainings/{training_id}/sections/{section_id}/lessons",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "training_id": {
            "name": "training_id",
            "in": "path",
            "description": "Identifiant du cours.",
            "type": "integer"
        },
        "section_id": {
            "name": "section_id",
            "in": "path",
            "description": "Identifiant de le section.",
            "type": "integer"
        },
        "lesson_id": {
            "name": "lesson_id",
            "in": "path",
            "description": "Identifiant du chapitre.",
            "type": "integer"
        },
        "question": {
            "name": "question",
            "in": "body",
            "description": "Le Question de Quiz \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "page_id",
                    "type_id"
                ],
                "properties": {
                    "page_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "question": {
                        "description": "/rest/api/questions",
                        "type": "string"
                    },
                    "static_resource_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "start_text_resource_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "end_text_resource_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "point_value": {
                        "description": "/rest/api/questions",
                        "type": "integer",
                        "default": "1"
                    },
                    "position": {
                        "description": "/rest/api/questions",
                        "type": "integer",
                        "default": "0"
                    },
                    "resource_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "correction": {
                        "description": "/rest/api/questions",
                        "type": "string"
                    },
                    "is_answer_ordered": {
                        "description": "/rest/api/questions",
                        "type": "boolean"
                    },
                    "type_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    },
                    "correction_resource_id": {
                        "description": "/rest/api/questions",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "page_id": {
            "name": "page_id",
            "in": "query",
            "description": "ID de QuizPage.",
            "type": "integer"
        },
        "quiz": {
            "name": "quiz",
            "in": "body",
            "description": "Le quiz \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "/rest/api/quizzes",
                        "type": "string"
                    },
                    "validity": {
                        "description": "/rest/api/quizzes",
                        "type": "integer",
                        "default": "100"
                    },
                    "is_rand": {
                        "description": "/rest/api/quizzes",
                        "type": "boolean"
                    },
                    "answer_rand": {
                        "description": "/rest/api/quizzes",
                        "type": "boolean"
                    },
                    "attempt_number": {
                        "description": "/rest/api/quizzes",
                        "type": "integer"
                    },
                    "is_correct_answer_hidden": {
                        "description": "/rest/api/quizzes",
                        "type": "boolean"
                    },
                    "is_wrong_answer_allowed": {
                        "description": "/rest/api/quizzes",
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "quiz-page": {
            "name": "quiz-page",
            "in": "body",
            "description": "Le QuizPage \u00e0 cr\u00e9er.",
            "schema": {
                "required": [
                    "quiz_id",
                    "position"
                ],
                "properties": {
                    "quiz_id": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    },
                    "resource_id": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    },
                    "audio_id": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    },
                    "title": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "resource_detail": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "rich_page_resource_details_id": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    },
                    "time": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    },
                    "type": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "subtype": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "mode": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "answer_display": {
                        "description": "/rest/api/quiz-pages",
                        "type": "string"
                    },
                    "is_inline": {
                        "description": "/rest/api/quiz-pages",
                        "type": "boolean"
                    },
                    "is_async_question": {
                        "description": "/rest/api/quiz-pages",
                        "type": "boolean"
                    },
                    "position": {
                        "description": "/rest/api/quiz-pages",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "quiz_id": {
            "name": "quiz_id",
            "in": "query",
            "description": "ID de Quiz.",
            "type": "string"
        },
        "provider_name": {
            "name": "provider_name",
            "in": "formData",
            "required": true,
            "type": "string"
        },
        "vimeo_id": {
            "name": "vimeo_id",
            "in": "formData",
            "type": "integer"
        },
        "content": {
            "name": "content",
            "in": "formData",
            "type": "integer"
        },
        "description": {
            "name": "description",
            "in": "formData",
            "type": "string"
        },
        "bibId": {
            "name": "bibId",
            "in": "query",
            "description": "Id de la communaut\u00e9",
            "type": "string"
        },
        "teacherId": {
            "name": "teacherId",
            "in": "query",
            "description": "ID teacher, pour filtre par Expert",
            "type": "integer"
        },
        "satisfaction": {
            "name": "satisfaction",
            "in": "body",
            "description": "La satisfaction \u00e0 cr\u00e9er.",
            "schema": {
                "properties": {
                    "note": {
                        "description": "/rest/api/satisfactions",
                        "type": "integer"
                    },
                    "avis": {
                        "description": "/rest/api/satisfactions",
                        "type": "string"
                    },
                    "recommandation": {
                        "description": "/rest/api/satisfactions",
                        "type": "string"
                    },
                    "user": {
                        "description": "User ID",
                        "type": "integer"
                    },
                    "training": {
                        "description": "Training ID",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "word": {
            "name": "word",
            "in": "query",
            "description": "Mot cl\u00e9 de recherche",
            "required": true,
            "type": "string"
        },
        "section": {
            "name": "section",
            "in": "body",
            "description": "La section \u00e0 cr\u00e9er.",
            "schema": {
                "properties": {
                    "name": {
                        "description": "/trainings/{training_id}/sections",
                        "type": "string"
                    },
                    "position": {
                        "description": "/trainings/{training_id}/sections",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "end": {
            "name": "end",
            "in": "query",
            "description": "Date de fin (Format: YYYY-MM-DD, type requis)",
            "type": "string"
        },
        "field": {
            "name": "field",
            "in": "query",
            "description": "Champs pour le tri",
            "type": "string",
            "default": "users",
            "enum": [
                "name",
                "users",
                "consultations",
                "note"
            ]
        },
        "order": {
            "name": "order",
            "in": "query",
            "description": "Sens du triage (ASC ou DESC)",
            "type": "string",
            "default": "DESC",
            "enum": [
                "ASC",
                "DESC"
            ]
        },
        "training": {
            "name": "training",
            "in": "body",
            "description": "Les donn\u00e9es d'\u00e9dition du cours.",
            "schema": {
                "properties": {
                    "deleted": {
                        "description": "Tag supprim\u00e9",
                        "type": "boolean"
                    }
                },
                "type": "object"
            }
        },
        "filter": {
            "name": "filter",
            "in": "body",
            "description": "Les crit\u00e8res de recherche",
            "schema": {
                "properties": {
                    "search": {
                        "description": "/rest/api/trainings/export",
                        "properties": {
                            "keyword": {
                                "description": "/rest/api/trainings/export",
                                "type": "string"
                            },
                            "categories": {
                                "description": "/rest/api/trainings/export",
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                }
                            },
                            "teachers": {
                                "description": "/rest/api/trainings/export",
                                "type": "array",
                                "items": {
                                    "type": "integer"
                                }
                            },
                            "status": {
                                "description": "/rest/api/trainings/export",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "sortBy": {
                        "description": "/rest/api/trainings/export",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sortDesc": {
                        "description": "/rest/api/trainings/export",
                        "type": "array",
                        "items": {
                            "type": "boolean"
                        }
                    }
                },
                "type": "object"
            }
        },
        "email": {
            "name": "email",
            "in": "query",
            "description": "Email de l'utilisateur",
            "type": "string"
        },
        "password": {
            "name": "password",
            "in": "query",
            "description": "Mot de passe de l'utilisateur",
            "type": "string"
        },
        "firstname": {
            "name": "firstname",
            "in": "query",
            "description": "Pr\u00e9nom de l'utilisateur",
            "type": "string"
        },
        "lastname": {
            "name": "lastname",
            "in": "query",
            "description": "Nom de l'utilisateur",
            "type": "string"
        },
        "roles": {
            "name": "roles",
            "in": "query",
            "description": "Groupe de l'utilisateur",
            "type": "string",
            "enum": [
                "Utilisateur",
                "Administrateur",
                "Partner",
                "Expert"
            ]
        },
        "channel": {
            "name": "channel",
            "in": "query",
            "description": "Id du channel",
            "type": "integer"
        },
        "community": {
            "name": "community",
            "in": "query",
            "description": "Id de la communaut\u00e9",
            "type": "integer"
        },
        "demo": {
            "name": "demo",
            "in": "query",
            "description": "Compte de test",
            "type": "string"
        },
        "user": {
            "name": "user",
            "in": "body",
            "description": "Les donn\u00e9e d'\u00e9dition de l'Utilisateur.",
            "schema": {
                "required": [
                    "email",
                    "firstname",
                    "lastname",
                    "roles",
                    "channel",
                    "community",
                    "demo"
                ],
                "properties": {
                    "email": {
                        "description": "Email de l'utilisateur",
                        "type": "string"
                    },
                    "password": {
                        "description": "Mot de passe de l'utilisateur",
                        "type": "string"
                    },
                    "firstname": {
                        "description": "Pr\u00e9nom de l'utilisateur",
                        "type": "string"
                    },
                    "lastname": {
                        "description": "Nom de l'utilisateur",
                        "type": "string"
                    },
                    "roles": {
                        "description": "Groupe de l'utilisateur",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Utilisateur",
                                "Administrateur",
                                "Partner",
                                "Expert"
                            ]
                        }
                    },
                    "channel": {
                        "description": "Id du channel",
                        "type": "integer"
                    },
                    "community": {
                        "description": "Id de la communaut\u00e9",
                        "type": "integer"
                    },
                    "demo": {
                        "description": "Compte de test",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "product_id_in_path_required": {
            "name": "product_id",
            "in": "path",
            "description": "The ID of the product",
            "required": true,
            "type": "integer",
            "format": "int64"
        },
        "product_in_body": {
            "name": "product",
            "in": "body",
            "schema": {
                "$ref": "#/definitions/Product"
            }
        },
        "ItemName": {
            "name": "ItemName",
            "in": "path",
            "description": "protected item name",
            "required": true,
            "type": "string",
            "maxLength": 256
        }
    },
    "responses": {
        "201": {
            "description": "Answer cr\u00e9\u00e9 avec succ\u00e8s."
        },
        "401": {
            "description": "L'utilisateur n'est pas authentifi\u00e9."
        },
        "400": {
            "description": "Donn\u00e9es envoy\u00e9es incorrectes."
        },
        "200": {
            "description": "Retourne une liste de Answer."
        },
        "404": {
            "description": "Le Answer n'existe pas."
        },
        "403": {
            "description": "L'utilisateur n'a pas le droit de cr\u00e9er un parcours."
        },
        "Json": {
            "description": "the basic response",
            "schema": {
                "properties": {
                    "status": {
                        "description": "The status of a product",
                        "type": "string",
                        "default": "available",
                        "enum": [
                            "available",
                            "discontinued"
                        ]
                    },
                    "success": {
                        "type": "boolean"
                    },
                    "data": {},
                    "errors": {
                        "type": "object"
                    },
                    "token": {
                        "type": "string"
                    }
                }
            }
        },
        "product": {
            "description": "All information about a product",
            "schema": {
                "$ref": "#/definitions/Product"
            }
        },
        "todo": {
            "description": "This API call has no documentated response (yet)"
        },
        "Item": {
            "description": "A protected item"
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        },
        "petstore_auth": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "scopes": {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account"
            }
        }
    },
    "tags": [
        {
            "name": "Answer"
        },
        {
            "name": "Answer"
        },
        {
            "name": "Answer"
        },
        {
            "name": "Answer"
        },
        {
            "name": "Career"
        },
        {
            "name": "Career"
        },
        {
            "name": "Career"
        },
        {
            "name": "Career"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Category"
        },
        {
            "name": "Channel"
        },
        {
            "name": "Command"
        },
        {
            "name": "Community"
        },
        {
            "name": "Exercise"
        },
        {
            "name": "Exercise"
        },
        {
            "name": "Exercise"
        },
        {
            "name": "Exercise"
        },
        {
            "name": "ExerciseInstruction"
        },
        {
            "name": "ExerciseInstruction"
        },
        {
            "name": "ExerciseInstruction"
        },
        {
            "name": "ExerciseInstruction"
        },
        {
            "name": "ExerciseQuestion"
        },
        {
            "name": "ExerciseQuestion"
        },
        {
            "name": "ExerciseQuestion"
        },
        {
            "name": "ExerciseQuestion"
        },
        {
            "name": "ExpertEditor"
        },
        {
            "name": "Group"
        },
        {
            "name": "Invoice"
        },
        {
            "name": "Lesson"
        },
        {
            "name": "Lesson"
        },
        {
            "name": "Lesson"
        },
        {
            "name": "Lesson"
        },
        {
            "name": "Order"
        },
        {
            "name": "Order"
        },
        {
            "name": "Payment"
        },
        {
            "name": "Product"
        },
        {
            "name": "Question"
        },
        {
            "name": "Question"
        },
        {
            "name": "Question"
        },
        {
            "name": "Question"
        },
        {
            "name": "Quiz"
        },
        {
            "name": "Quiz"
        },
        {
            "name": "Quiz"
        },
        {
            "name": "Quiz"
        },
        {
            "name": "QuizPage"
        },
        {
            "name": "QuizPage"
        },
        {
            "name": "QuizPage"
        },
        {
            "name": "QuizPage"
        },
        {
            "name": "Resource"
        },
        {
            "name": "Resource"
        },
        {
            "name": "Resource"
        },
        {
            "name": "Resource"
        },
        {
            "name": "Resource"
        },
        {
            "name": "Satisfaction"
        },
        {
            "name": "Satisfaction"
        },
        {
            "name": "Satisfaction"
        },
        {
            "name": "Satisfaction"
        },
        {
            "name": "Search"
        },
        {
            "name": "Section"
        },
        {
            "name": "Section"
        },
        {
            "name": "Section"
        },
        {
            "name": "Section"
        },
        {
            "name": "Stats"
        },
        {
            "name": "Stats"
        },
        {
            "name": "Stats"
        },
        {
            "name": "Training"
        },
        {
            "name": "Training"
        },
        {
            "name": "Training"
        },
        {
            "name": "Training"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "User"
        },
        {
            "name": "UserHasTraining"
        },
        {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
                "description": "Find out more",
                "url": "http://swagger.io"
            }
        },
        {
            "name": "store",
            "description": "Access to Petstore orders"
        },
        {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
                "description": "Find out more about our store",
                "url": "http://swagger.io"
            }
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}